#!/usr/bin/env bash
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

cmd-scheduler-docker-local-report() {
  declare desc="displays a scheduler-docker-local report for one or more apps"
  declare cmd="scheduler-docker-local:report"
  [[ "$1" == "$cmd" ]] && shift 1
  declare APP="$1" INFO_FLAG="$2"
  local INSTALLED_APPS=$(dokku_apps)

  if [[ -n "$APP" ]] && [[ "$APP" == --* ]]; then
    INFO_FLAG="$APP"
    APP=""
  fi

  if [[ -z "$APP" ]] && [[ -z "$INFO_FLAG" ]]; then
    INFO_FLAG="true"
  fi

  if [[ -z "$APP" ]]; then
    for app in $INSTALLED_APPS; do
      cmd-scheduler-docker-local-report-single "$app" "$INFO_FLAG" | tee || true
    done
  else
    cmd-scheduler-docker-local-report-single "$APP" "$INFO_FLAG"
  fi
}

cmd-scheduler-docker-local-report-single() {
  declare APP="$1" INFO_FLAG="$2"
  if [[ "$INFO_FLAG" == "true" ]]; then
    INFO_FLAG=""
  fi
  verify_app_name "$APP"
  local flag_map=(
    "--scheduler-docker-local-disable-chown: $(fn-plugin-property-get "scheduler-docker-local" "$APP" "disable-chown" "")"
  )

  if [[ -z "$INFO_FLAG" ]]; then
    dokku_log_info2_quiet "${APP} scheduler-docker-local information"
    for flag in "${flag_map[@]}"; do
      key="$(echo "${flag#--}" | cut -f1 -d' ' | tr - ' ')"
      dokku_log_verbose "$(printf "%-30s %-25s" "${key^}" "${flag#*: }")"
    done
  else
    local match=false
    local value_exists=false
    for flag in "${flag_map[@]}"; do
      valid_flags="${valid_flags} $(echo "$flag" | cut -d':' -f1)"
      if [[ "$flag" == "${INFO_FLAG}:"* ]]; then
        value=${flag#*: }
        size="${#value}"
        if [[ "$size" -ne 0 ]]; then
          echo "$value" && match=true && value_exists=true
        else
          match=true
        fi
      fi
    done
    [[ "$match" == "true" ]] || dokku_log_fail "Invalid flag passed, valid flags:${valid_flags}"
    [[ "$value_exists" == "true" ]] || dokku_log_fail "not deployed"
  fi
}

fn-scheduler-docker-local-retire-container() {
  declare APP="$1" CID="$2" DEAD_TIME="$3"
  local STATE

  STATE="$("$DOCKER_BIN" container inspect --format "{{ .State.Status }}" "$CID" 2>/dev/null || true)"
  if [[ -z "$STATE" ]]; then
    return
  fi

  DOKKU_DOCKER_STOP_TIMEOUT="$(config_get "$APP" DOKKU_DOCKER_STOP_TIMEOUT || true)"
  [[ $DOKKU_DOCKER_STOP_TIMEOUT ]] && DOCKER_STOP_TIME_ARG="--time=${DOKKU_DOCKER_STOP_TIMEOUT}"

  if [[ "$STATE" == "restarting" ]]; then
    "$DOCKER_BIN" container update --restart=no "$CID" >/dev/null 2>&1
  fi

  if [[ "$STATE" != "dead" ]] && [[ "$STATE" != "exited" ]]; then
    # Attempt to stop, if that fails, then force a kill as docker seems
    # to not send SIGKILL as the docs would indicate. If that fails, move
    # on to the next.
    # shellcheck disable=SC2086
    "$DOCKER_BIN" container stop $DOCKER_STOP_TIME_ARG "$CID" \
      || "$DOCKER_BIN" container kill "$CID" \
      || dokku_log_warn "Unable to kill container ${CID}"
  fi

  STATE="$("$DOCKER_BIN" container inspect --format "{{ .State.Status }}" "$CID" 2>/dev/null || true)"
  if [[ -z "$STATE" ]]; then
    return
  fi

  if [[ "$STATE" != "dead" ]] && [[ "$STATE" != "exited" ]]; then
    if ! "$DOCKER_BIN" container kill "$CID"; then
      dokku_log_warn "Unable to kill container ${CID}"
    fi
  fi
}

fn-scheduler-docker-local-register-retired-container() {
  declare APP="$1" CID="$2" WAIT="$3"
  local DEAD_CONTAINER_FILE="${DOKKU_LIB_ROOT}/data/scheduler-docker-local/dead-containers"
  local CURRENT_TIME DEAD_TIME

  CURRENT_TIME="$(date +%s)"
  DEAD_TIME=$((CURRENT_TIME + WAIT))
  echo "${APP} ${CID} ${DEAD_TIME}" >>"${DEAD_CONTAINER_FILE}"
}
